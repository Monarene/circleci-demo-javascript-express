version: 2.1

orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@3.1.3
# Orchestrate or schedule a set of jobs

commands:
  # Exercise: Reusable Job Code
  print_pipeline_id:
    parameters:
      id: 
        type: string
    steps:
      - run: echo << parameters.id >>

  # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


workflows:
  version: 2
  build:
    jobs:
      - create_infrastructure
      - smoke_test
      # - configure_infrastructure
      # - create_infrastructure
      # - build
      

jobs:
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      # - run:
      #     name: smoke test
      #     command: |
      #       URL="https://blog.udacity.com/"
      #       # Test if website exists
      #       if curl -s --head ${URL} 
      #       then
      #         return 0
      #       else
      #         return 1
      #       fi
      - run:
          name: Test job
          command:  return 1
      - destroy_environment  
  configure_infrastructure: 
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f0:82:59:4c:50:87:44:f8:c5:ed:8a:67:a6:ae:4a:d7"] 
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt main.yaml
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
  build:
    working_directory: ~/mern-starter
    docker:
      - image: circleci/node:10.16.3
      - image: mongo:4.2.0
    steps:
      - checkout
      - print_pipeline_id:
          to: $CIRCLE_WORKFLOW_ID
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@5'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm test
      - run:
          name: code-coverage
          command: './node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts:
          path: test-results.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: test-results.xml
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: |
          # echo "This is an output files" > output.txt
      - persist_to_workspace:
          root: .     # relative path to our working director
          paths: /output.txt
  print_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: |
          # cat output.txt
      - attach_workspace:
          at: ./
      
